(function() {var implementors = {};
implementors["bstr"] = [{"text":"impl AsRef&lt;[u8]&gt; for BString","synthetic":false,"types":[]},{"text":"impl AsRef&lt;BStr&gt; for BString","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for BStr","synthetic":false,"types":[]},{"text":"impl AsRef&lt;BStr&gt; for [u8]","synthetic":false,"types":[]},{"text":"impl AsRef&lt;BStr&gt; for str","synthetic":false,"types":[]}];
implementors["failure"] = [{"text":"impl AsRef&lt;dyn Fail + 'static&gt; for Error","synthetic":false,"types":[]}];
implementors["martian_filetypes"] = [{"text":"impl AsRef&lt;Path&gt; for Bincode","synthetic":false,"types":[]},{"text":"impl&lt;F&gt; AsRef&lt;Path&gt; for BinaryFormat&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: MartianFileType,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;F&gt; AsRef&lt;Path&gt; for Gzip&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: MartianFileType,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Path&gt; for Json","synthetic":false,"types":[]},{"text":"impl&lt;F&gt; AsRef&lt;Path&gt; for JsonFormat&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: MartianFileType,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;F&gt; AsRef&lt;Path&gt; for Lz4&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: MartianFileType,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;F, D&gt; AsRef&lt;Path&gt; for DelimitedFormat&lt;F, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: MartianFileType,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: TableConfig + Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Path&gt; for Csv","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Path&gt; for Tsv","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl AsRef&lt;[u8]&gt; for Literal","synthetic":false,"types":[]}];
implementors["tempfile"] = [{"text":"impl AsRef&lt;Path&gt; for TempDir","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Path&gt; for TempPath","synthetic":false,"types":[]},{"text":"impl AsRef&lt;OsStr&gt; for TempPath","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Path&gt; for NamedTempFile","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()