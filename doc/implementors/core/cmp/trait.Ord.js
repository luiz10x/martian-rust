(function() {var implementors = {};
implementors["bstr"] = [{"text":"impl Ord for BString","synthetic":false,"types":[]},{"text":"impl Ord for BStr","synthetic":false,"types":[]}];
implementors["byteorder"] = [{"text":"impl Ord for BigEndian","synthetic":false,"types":[]},{"text":"impl Ord for LittleEndian","synthetic":false,"types":[]}];
implementors["chrono"] = [{"text":"impl Ord for NaiveDate","synthetic":false,"types":[]},{"text":"impl Ord for NaiveDateTime","synthetic":false,"types":[]},{"text":"impl Ord for IsoWeek","synthetic":false,"types":[]},{"text":"impl Ord for NaiveTime","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Ord for Date&lt;Tz&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Ord for DateTime&lt;Tz&gt;","synthetic":false,"types":[]}];
implementors["gimli"] = [{"text":"impl Ord for Register","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Ord&gt; Ord for DebugInfoOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Ord&gt; Ord for DebugTypesOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Ord&gt; Ord for UnitSectionOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Ord for SectionId","synthetic":false,"types":[]},{"text":"impl Ord for DwUt","synthetic":false,"types":[]},{"text":"impl Ord for DwCfa","synthetic":false,"types":[]},{"text":"impl Ord for DwChildren","synthetic":false,"types":[]},{"text":"impl Ord for DwTag","synthetic":false,"types":[]},{"text":"impl Ord for DwAt","synthetic":false,"types":[]},{"text":"impl Ord for DwForm","synthetic":false,"types":[]},{"text":"impl Ord for DwAte","synthetic":false,"types":[]},{"text":"impl Ord for DwLle","synthetic":false,"types":[]},{"text":"impl Ord for DwDs","synthetic":false,"types":[]},{"text":"impl Ord for DwEnd","synthetic":false,"types":[]},{"text":"impl Ord for DwAccess","synthetic":false,"types":[]},{"text":"impl Ord for DwVis","synthetic":false,"types":[]},{"text":"impl Ord for DwVirtuality","synthetic":false,"types":[]},{"text":"impl Ord for DwLang","synthetic":false,"types":[]},{"text":"impl Ord for DwAddr","synthetic":false,"types":[]},{"text":"impl Ord for DwId","synthetic":false,"types":[]},{"text":"impl Ord for DwCc","synthetic":false,"types":[]},{"text":"impl Ord for DwInl","synthetic":false,"types":[]},{"text":"impl Ord for DwOrd","synthetic":false,"types":[]},{"text":"impl Ord for DwDsc","synthetic":false,"types":[]},{"text":"impl Ord for DwIdx","synthetic":false,"types":[]},{"text":"impl Ord for DwDefaulted","synthetic":false,"types":[]},{"text":"impl Ord for DwLns","synthetic":false,"types":[]},{"text":"impl Ord for DwLne","synthetic":false,"types":[]},{"text":"impl Ord for DwLnct","synthetic":false,"types":[]},{"text":"impl Ord for DwMacro","synthetic":false,"types":[]},{"text":"impl Ord for DwRle","synthetic":false,"types":[]},{"text":"impl Ord for DwOp","synthetic":false,"types":[]},{"text":"impl Ord for DwEhPe","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + Ord&gt; Ord for ArangeEntry&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Ord for ColumnType","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Ord&gt; Ord for UnitOffset&lt;T&gt;","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl Ord for Level","synthetic":false,"types":[]},{"text":"impl Ord for LevelFilter","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Ord for Metadata&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Ord for MetadataBuilder&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["object"] = [{"text":"impl&lt;E:&nbsp;Ord + Endian&gt; Ord for U16Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Ord + Endian&gt; Ord for U32Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Ord + Endian&gt; Ord for U64Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Ord + Endian&gt; Ord for I16Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Ord + Endian&gt; Ord for I32Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Ord + Endian&gt; Ord for I64Bytes&lt;E&gt;","synthetic":false,"types":[]}];
implementors["pest"] = [{"text":"impl&lt;'i&gt; Ord for Position&lt;'i&gt;","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Ord for Ident","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Ord for Span","synthetic":false,"types":[]},{"text":"impl Ord for Position","synthetic":false,"types":[]},{"text":"impl Ord for Literal","synthetic":false,"types":[]},{"text":"impl Ord for ClassUnicodeRange","synthetic":false,"types":[]},{"text":"impl Ord for ClassBytesRange","synthetic":false,"types":[]},{"text":"impl Ord for Utf8Sequence","synthetic":false,"types":[]},{"text":"impl Ord for Utf8Range","synthetic":false,"types":[]}];
implementors["rustc_version"] = [{"text":"impl Ord for Channel","synthetic":false,"types":[]},{"text":"impl Ord for VersionMeta","synthetic":false,"types":[]}];
implementors["semver"] = [{"text":"impl Ord for Identifier","synthetic":false,"types":[]},{"text":"impl Ord for Version","synthetic":false,"types":[]},{"text":"impl Ord for VersionReq","synthetic":false,"types":[]}];
implementors["semver_parser"] = [{"text":"impl Ord for RangeSet","synthetic":false,"types":[]},{"text":"impl Ord for Compat","synthetic":false,"types":[]},{"text":"impl Ord for Range","synthetic":false,"types":[]},{"text":"impl Ord for Comparator","synthetic":false,"types":[]},{"text":"impl Ord for Op","synthetic":false,"types":[]},{"text":"impl Ord for Identifier","synthetic":false,"types":[]},{"text":"impl&lt;'input&gt; Ord for Token&lt;'input&gt;","synthetic":false,"types":[]},{"text":"impl Ord for Error","synthetic":false,"types":[]},{"text":"impl&lt;'input&gt; Ord for Error&lt;'input&gt;","synthetic":false,"types":[]},{"text":"impl Ord for Version","synthetic":false,"types":[]},{"text":"impl Ord for Identifier","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl Ord for Lifetime","synthetic":false,"types":[]}];
implementors["time"] = [{"text":"impl Ord for Duration","synthetic":false,"types":[]},{"text":"impl Ord for Timespec","synthetic":false,"types":[]},{"text":"impl Ord for SteadyTime","synthetic":false,"types":[]},{"text":"impl Ord for Tm","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()